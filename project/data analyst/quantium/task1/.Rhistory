sortedWordFrequency <- data.table(words = names(wordFrequency), frequency = as.integer(wordFrequency))
sortedWordFrequency <- sortedWordFrequency[words != ""]
sortedWordFrequency <- sortedWordFrequency[order(-frequency)]
print(sortedWordFrequency)
#### Remove salsa products
transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))]
transactionData <- transactionData[SALSA == FALSE, ][, SALSA := NULL]
#### Summarise the data to check for nulls and possible outliers
# Over to you!
summary(transactionData)
summary(is.na(transactionData))
#### Filter the dataset to find the outlier
# Over to you! Use a filter to examine the transactions in question.
outlier <- transactionData[PROD_QTY == 200,]
outlier
#### Let's see if the customer has had other transactions
# Over to you! Use a filter to see what other transactions that customer made.
outlierTransactions <- transactionData[LYLTY_CARD_NBR == 226000,] # this is the outliers customer
outlierTransactions
#
#### Filter out the customer based on the loyalty card number
transactionData <- transactionData[LYLTY_CARD_NBR != 226000]
transactionData
#### Re-examine transaction data
print(transactionData)
#### Count the number of transactions by date
transactions_by_date <- transactionData[, .N, by = DATE]
print(transactions_by_date)
# Over to you! Create a summary of transaction count by date.
summary(transactions_by_date)
#### Create a sequence of dates and join this the count of transactions by date
# Over to you - create a column of dates that includes every day from 1 Jul 2018 to 30 Jun 2019, and join it onto the data to fill in the missing day.
date_sequence <- data.table(DATE = seq(as.Date("2018-07-01"), as.Date("2019-06-30"), by = "days"))
transactions_by_day <- merge(date_sequence, transactions_by_date, by = "DATE", all.x = TRUE)
transactions_by_day[is.na(N), N := 0]
print(transactions_by_day)# check 365
#### Setting plot themes to format graphs
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
#### Plot transactions over time
ggplot(transactions_by_day, aes(x = DATE, y = N)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Filter to December and look at individual days
december_data <- transactions_by_day[month(DATE) == 12]
# Over to you - recreate the chart above zoomed in to the relevant dates.
ggplot(december_data, aes(x = DATE, y = N)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
scale_x_date(breaks = seq(as.Date("2018-12-01"), as.Date("2018-12-31"), by = "1 day")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Pack size
#### We can work this out by taking the digits that are in PROD_NAME
transactionData[, PACK_SIZE := parse_number(PROD_NAME)]
#### Always check your output
#### Let's check if the pack sizes look sensible
transactionData[, .N, PACK_SIZE][order(PACK_SIZE)]
#### Let's plot a histogram of PACK_SIZE since we know that it is a categorical variable and not a continuous variable even though it is numeric.
# Over to you! Plot a histogram showing the number of transactions by pack size.
ggplot(transactionData, aes(x = PACK_SIZE)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black", alpha = 0.7) +
labs(x = "Pack Size", y = "Number of Transactions", title = "Histogram of Transactions by Pack Size") +
theme_minimal()
#### Brands
# Over to you! Create a column which contains the brand of the product, by extracting it from the product name.
transactionData[, BRAND := gsub("^(\\w+).*", "\\1", PROD_NAME)]
head(transactionData)
#### Checking brands
# Over to you! Check the results look reasonable.
unique(transactionData$BRAND)
#### Clean brand names
transactionData[BRAND_NAME == "RED", BRAND_NAME := "RRD"]
#### Brands
# Over to you! Create a column which contains the brand of the product, by extracting it from the product name.
transactionData[, BRAND := gsub("^(\\w+).*", "\\1", PROD_NAME)]
head(transactionData)
#### Checking brands
# Over to you! Check the results look reasonable.
unique(transactionData$BRAND)
#### Clean brand names
transactionData[BRAND == "RED", BRAND := "RRD"]
transactionData[BRAND == "GRAIN", BRAND := "GrnWves"]
transactionData[BRAND == "INFZNS", BRAND := "Infuzions"]
transactionData[BRAND == "WW", BRAND := "Woolworths"]
transactionData[BRAND == "SNBTS", BRAND := "Sunbites"]
# Over to you! Add any additional brand adjustments you think may be required.
brands <- data.frame(sort(table(transactionData$BRAND_NAME),decreasing = TRUE ))
#### Check again
# Over to you! Check the results look reasonable.
setnames(brands,c("BRAND","freq"))
#### Clean brand names
transactionData[BRAND == "RED", BRAND := "RRD"]
transactionData[BRAND == "GRAIN", BRAND := "GrnWves"]
transactionData[BRAND == "INFZNS", BRAND := "Infuzions"]
transactionData[BRAND == "WW", BRAND := "Woolworths"]
transactionData[BRAND == "SNBTS", BRAND := "Sunbites"]
# Over to you! Add any additional brand adjustments you think may be required.
brands <- data.frame(sort(table(transactionData$BRAND),decreasing = TRUE ))
#### Check again
# Over to you! Check the results look reasonable.
setnames(brands,c("BRAND","freq"))
ggplot(brands,aes(x=BRAND,y= freq,fill=BRAND)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Frequency",title="Distribution Of Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Examine the words in PROD_NAME to see if there are any incorrect entries
#### such as products that are not chips
productWords <- data.table(unlist(strsplit(unique(transactionData[, PROD_NAME]), " ")))
setnames(productWords, 'words')
#### Clean brand names
transactionData[BRAND == "RED", BRAND := "RRD"]
transactionData[BRAND == "GRAIN", BRAND := "GrnWves"]
transactionData[BRAND == "INFZNS", BRAND := "Infuzions"]
transactionData[BRAND == "WW", BRAND := "Woolworths"]
transactionData[BRAND == "SNBTS", BRAND := "Sunbites"]
# Over to you! Add any additional brand adjustments you think may be required.
brands <- data.frame(sort(table(transactionData$BRAND),decreasing = TRUE ))
#### Check again
# Over to you! Check the results look reasonable.
setnames(brands,c("BRAND","freq"))
ggplot(brands,aes(x=BRAND,y= freq,fill=BRAND)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Frequency",title="Distribution Of Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Examining customer data
# Over to you! Do some basic summaries of the dataset, including distributions ofany key columns.
summary(customerData)
sum(is.na(customerData))
lifestageCategory <- data.frame(sort(table(customerData$LIFESTAGE),decreasing = TRUE ))
setnames(lifestageCategory,c("lifestage","freq"))
ggplot(lifestageCategory,aes(x=lifestage,y= freq,fill=lifestage)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="frequency",title="Distribution Of Customers Over Lifestages")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
premiumCustomerType <- data.frame(sort(table(customerData$PREMIUM_CUSTOMER),decreasing = TRUE ))
setnames(premiumCustomerType,c("premium_customer_type","freq"))
ggplot(premiumCustomerType,aes(x=premium_customer_type,y= freq,fill=premium_customer_type)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="frequency",title="Distribution Of Customers Over Premium Types")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
#### Total sales by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate the summary of sales by those dimensions and create a plot.
#total sales by life stages
totalSalesByLifestage <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$LIFESTAGE),FUN=sum)
setnames(totalSalesByLifestage,c("Lifestage","Total_Sales"))
totalSalesByLifestage<-totalSalesByLifestage[order(totalSalesByLifestage$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByLifestage,aes(x=reorder(Lifestage,-Total_Sales),y= Total_Sales,fill=Lifestage)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="Total Sales",title="Total Sales By Lifestage")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
# total sales by customer premium
totalSalesByPremium <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$PREMIUM_CUSTOMER),FUN=sum)
setnames(totalSalesByPremium,c("Premium_Customer","Total_Sales"))
totalSalesByPremium<-totalSalesByPremium[order(totalSalesByPremium$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByPremium,aes(x=reorder(Premium_Customer,-Total_Sales),y= Total_Sales,fill=Premium_Customer)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Premium Customer", y ="Total Sales",title="Total Sales By Premium Customer")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
#total sales by customer premium and lifestage
totalSalesByPremiumAndLifestage <- aggregate(.~LIFESTAGE+PREMIUM_CUSTOMER, data = data[,c("LIFESTAGE","PREMIUM_CUSTOMER","TOT_SALES")] , sum)
totalSalesByPremiumAndLifestage$Lifestage_Premium <- paste(totalSalesByPremiumAndLifestage$LIFESTAGE,totalSalesByPremiumAndLifestage$PREMIUM_CUSTOMER)
totalSalesByPremiumAndLifestage <- totalSalesByPremiumAndLifestage[,c("Lifestage_Premium","TOT_SALES")]
ggplot(totalSalesByPremiumAndLifestage,aes(x=reorder(Lifestage_Premium,-TOT_SALES),y= TOT_SALES,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Total Sales",title="Total Sales By Lifestage By Premium")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Total sales by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate the summary of sales by those dimensions and create a plot.
#total sales by life stages
totalSalesByLifestage <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$LIFESTAGE),FUN=sum)
setnames(totalSalesByLifestage,c("Lifestage","Total_Sales"))
totalSalesByLifestage<-totalSalesByLifestage[order(totalSalesByLifestage$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByLifestage,aes(x=reorder(Lifestage,-Total_Sales),y= Total_Sales,fill=Lifestage)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="Total Sales",title="Total Sales By Lifestage")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
# total sales by customer premium
totalSalesByPremium <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$PREMIUM_CUSTOMER),FUN=sum)
setnames(totalSalesByPremium,c("Premium_Customer","Total_Sales"))
totalSalesByPremium<-totalSalesByPremium[order(totalSalesByPremium$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByPremium,aes(x=reorder(Premium_Customer,-Total_Sales),y= Total_Sales,fill=Premium_Customer)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Premium Customer", y ="Total Sales",title="Total Sales By Premium Customer")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
#total sales by customer premium and lifestage
totalSalesByPremiumAndLifestage <- aggregate(.~LIFESTAGE+PREMIUM_CUSTOMER, data = data[,c("LIFESTAGE","PREMIUM_CUSTOMER","TOT_SALES")] , sum)
totalSalesByPremiumAndLifestage$Lifestage_Premium <- paste(totalSalesByPremiumAndLifestage$LIFESTAGE,totalSalesByPremiumAndLifestage$PREMIUM_CUSTOMER)
totalSalesByPremiumAndLifestage <- totalSalesByPremiumAndLifestage[,c("Lifestage_Premium","TOT_SALES")]
ggplot(totalSalesByPremiumAndLifestage,aes(x=reorder(Lifestage_Premium,-TOT_SALES),y= TOT_SALES,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Total Sales",title="Total Sales By Lifestage By Premium")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Perform an independent t-test between mainstream vs premium and budget midage and
#### young singles and couples
# Over to you! Perform a t-test to see if the difference is significant.
mainstreamYoungSingleCouples <- data.table(data)
mainstreamYoungSingleCouples$Lifestage_Premium <-  data.table(paste(data$LIFESTAGE,data$PREMIUM_CUSTOMER))
mainstreamYoungSingleCouples <- mainstreamYoungSingleCouples[Lifestage_Premium =='YOUNG SINGLES/COUPLES Mainstream']
mainstreamYoungSingleCouplesBrandFreq <- data.frame(sort(table(mainstreamYoungSingleCouples$BRAND_NAME),decreasing = TRUE ))
setnames(mainstreamYoungSingleCouplesBrandFreq,c('BRAND','freq'))
ggplot(mainstreamYoungSingleCouplesBrandFreq,aes(x=BRAND_NAME ,y=freq ,fill=BRAND_NAME)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Count",title="Mainstream - Young Single/Couples Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Perform an independent t-test between mainstream vs premium and budget midage and
#### young singles and couples
# Over to you! Perform a t-test to see if the difference is significant.
mainstreamYoungSingleCouples <- data.table(data)
mainstreamYoungSingleCouples$Lifestage_Premium <-  data.table(paste(data$LIFESTAGE,data$PREMIUM_CUSTOMER))
mainstreamYoungSingleCouples <- mainstreamYoungSingleCouples[Lifestage_Premium =='YOUNG SINGLES/COUPLES Mainstream']
mainstreamYoungSingleCouplesBrandFreq <- data.frame(sort(table(mainstreamYoungSingleCouples$BRAND_NAME),decreasing = TRUE ))
setnames(mainstreamYoungSingleCouplesBrandFreq,c('BRAND','freq'))
ggplot(mainstreamYoungSingleCouplesBrandFreq,aes(x=BRAND ,y=freq ,fill=BRAND)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Count",title="Mainstream - Young Single/Couples Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
mainstreamYoungSingleCouplesBrandFreq
#### Perform an independent t-test between mainstream vs premium and budget midage and
#### young singles and couples
# Over to you! Perform a t-test to see if the difference is significant.
mainstreamYoungSingleCouples <- data.table(data)
mainstreamYoungSingleCouples$Lifestage_Premium <-  data.table(paste(data$LIFESTAGE,data$PREMIUM_CUSTOMER))
mainstreamYoungSingleCouples <- mainstreamYoungSingleCouples[Lifestage_Premium =='YOUNG SINGLES/COUPLES Mainstream']
mainstreamYoungSingleCouplesBrandFreq <- data.frame(sort(table(mainstreamYoungSingleCouples$BRAND),decreasing = TRUE ))
setnames(mainstreamYoungSingleCouplesBrandFreq,c('BRAND ','freq'))
ggplot(mainstreamYoungSingleCouplesBrandFreq,aes(x=BRAND ,y=freq ,fill=BRAND)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Count",title="Mainstream - Young Single/Couples Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Perform an independent t-test between mainstream vs premium and budget midage and
#### young singles and couples
# Over to you! Perform a t-test to see if the difference is significant.
mainstreamYoungSingleCouples <- data.table(data)
mainstreamYoungSingleCouples$Lifestage_Premium <- data.table(paste(data$LIFESTAGE, data$PREMIUM_CUSTOMER))
mainstreamYoungSingleCouples <- mainstreamYoungSingleCouples[Lifestage_Premium == 'YOUNG SINGLES/COUPLES Mainstream']
mainstreamYoungSingleCouplesBrandFreq <- data.frame(sort(table(mainstreamYoungSingleCouples$BRAND), decreasing = TRUE))
setnames(mainstreamYoungSingleCouplesBrandFreq, c('BRAND', 'freq'))
ggplot(mainstreamYoungSingleCouplesBrandFreq, aes(x = BRAND, y = freq, fill = BRAND)) +
geom_bar(stat = "identity", width = 0.5) +
labs(x = "Brands", y = "Count", title = "Mainstream - Young Single/Couples Brand Purchases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
install.packages("knitr")
install.packages("rmarkdown")
install.packages("rmarkdown")
# set options for R markdown knitting
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(linewidth=80)
# set up line wrapping in MD knit output
library(knitr)
hook_output = knit_hooks$get("output")
knit_hooks$set(output = function(x, options)
{
# this hook is used only when the linewidth option is not NULL
if (!is.null(n <- options$linewidth))
{
x = knitr:::split_lines(x)
# any lines wider than n should be wrapped
if (any(nchar(x) > n))
x = strwrap(x, width = n)
x = paste(x, collapse = "\n")
}
hook_output(x, options)
})
#### Example code to install packages
#install.packages("data.table")
#### Load required libraries
library(data.table)
library(ggplot2)
library(ggmosaic)
library(readr)
#### Point the filePath to where you have downloaded the datasets to and
#### assign the data files to data.tables
# over to you! fill in the path to your working directory. If you are on a Windows machine, you will need to use forward slashes (/) instead of backshashes (\)
filePath <- ""
transactionData <- fread(paste0(filePath,"QVI_transaction_data.csv"))
customerData <- fread(paste0(filePath,"QVI_purchase_behaviour.csv"))
#### Examine transaction data
# Over to you! Examine the data using one or more of the methods described above.
str(transactionData)
head(transactionData)
str(customerData)
head(customerData)
#### Convert DATE column to a date format
#### A quick search online tells us that CSV and Excel integer dates begin on 30 Dec 1899
transactionData$DATE <- as.Date(transactionData$DATE, origin = "1899-12-30")
#### Examine PROD_NAME
# Over to you! Generate a summary of the PROD_NAME column.
productWords <- data.table(unlist(strsplit(unique(transactionData[, PROD_NAME]), " ")))
setnames(productWords, 'words')
summary_prod_name <- table(transactionData$PROD_NAME)
print(summary_prod_name)
#### Examine the words in PROD_NAME to see if there are any incorrect entries
#### such as products that are not chips
productWords <- data.table(unlist(strsplit(unique(transactionData[, PROD_NAME]), " ")))
setnames(productWords, 'words')
# Over to you! Remove digits, and special characters, and then sort the distinct words by frequency of occurrence.
#### Removing digits
#### Removing special characters
containsDigitsOrSpecial <- grepl("[0-9&]", productWords$words)
productWords <- productWords[!containsDigitsOrSpecial]
#### Let's look at the most common words by counting the number of times a word appears and
#### sorting them by this frequency in order of highest to lowest frequency
wordFrequency <- table(productWords$words)
sortedWordFrequency <- data.table(words = names(wordFrequency), frequency = as.integer(wordFrequency))
sortedWordFrequency <- sortedWordFrequency[words != ""]
sortedWordFrequency <- sortedWordFrequency[order(-frequency)]
print(sortedWordFrequency)
#### Remove salsa products
transactionData[, SALSA := grepl("salsa", tolower(PROD_NAME))]
transactionData <- transactionData[SALSA == FALSE, ][, SALSA := NULL]
#### Summarise the data to check for nulls and possible outliers
# Over to you!
summary(transactionData)
summary(is.na(transactionData))
#### Filter the dataset to find the outlier
# Over to you! Use a filter to examine the transactions in question.
outlier <- transactionData[PROD_QTY == 200,]
outlier
#### Let's see if the customer has had other transactions
# Over to you! Use a filter to see what other transactions that customer made.
outlierTransactions <- transactionData[LYLTY_CARD_NBR == 226000,] # this is the outliers customer
outlierTransactions
#
#### Filter out the customer based on the loyalty card number
transactionData <- transactionData[LYLTY_CARD_NBR != 226000]
transactionData
#### Re-examine transaction data
print(transactionData)
#### Count the number of transactions by date
transactions_by_date <- transactionData[, .N, by = DATE]
print(transactions_by_date)
# Over to you! Create a summary of transaction count by date.
summary(transactions_by_date)
#### Create a sequence of dates and join this the count of transactions by date
# Over to you - create a column of dates that includes every day from 1 Jul 2018 to 30 Jun 2019, and join it onto the data to fill in the missing day.
date_sequence <- data.table(DATE = seq(as.Date("2018-07-01"), as.Date("2019-06-30"), by = "days"))
transactions_by_day <- merge(date_sequence, transactions_by_date, by = "DATE", all.x = TRUE)
transactions_by_day[is.na(N), N := 0]
print(transactions_by_day)# check 365
#### Setting plot themes to format graphs
theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
#### Plot transactions over time
ggplot(transactions_by_day, aes(x = DATE, y = N)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
scale_x_date(breaks = "1 month") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Filter to December and look at individual days
december_data <- transactions_by_day[month(DATE) == 12]
# Over to you - recreate the chart above zoomed in to the relevant dates.
ggplot(december_data, aes(x = DATE, y = N)) +
geom_line() +
labs(x = "Day", y = "Number of transactions", title = "Transactions over time") +
scale_x_date(breaks = seq(as.Date("2018-12-01"), as.Date("2018-12-31"), by = "1 day")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Pack size
#### We can work this out by taking the digits that are in PROD_NAME
transactionData[, PACK_SIZE := parse_number(PROD_NAME)]
#### Always check your output
#### Let's check if the pack sizes look sensible
transactionData[, .N, PACK_SIZE][order(PACK_SIZE)]
#### Let's plot a histogram of PACK_SIZE since we know that it is a categorical variable and not a continuous variable even though it is numeric.
# Over to you! Plot a histogram showing the number of transactions by pack size.
ggplot(transactionData, aes(x = PACK_SIZE)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black", alpha = 0.7) +
labs(x = "Pack Size", y = "Number of Transactions", title = "Histogram of Transactions by Pack Size") +
theme_minimal()
#### Brands
# Over to you! Create a column which contains the brand of the product, by extracting it from the product name.
transactionData[, BRAND := gsub("^(\\w+).*", "\\1", PROD_NAME)]
head(transactionData)
#### Checking brands
# Over to you! Check the results look reasonable.
unique(transactionData$BRAND)
#### Clean brand names
transactionData[BRAND == "RED", BRAND := "RRD"]
transactionData[BRAND == "GRAIN", BRAND := "GrnWves"]
transactionData[BRAND == "INFZNS", BRAND := "Infuzions"]
transactionData[BRAND == "WW", BRAND := "Woolworths"]
transactionData[BRAND == "SNBTS", BRAND := "Sunbites"]
# Over to you! Add any additional brand adjustments you think may be required.
brands <- data.frame(sort(table(transactionData$BRAND),decreasing = TRUE ))
#### Check again
# Over to you! Check the results look reasonable.
setnames(brands,c("BRAND","freq"))
ggplot(brands,aes(x=BRAND,y= freq,fill=BRAND)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Brands", y ="Frequency",title="Distribution Of Brand Purchases")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Examining customer data
# Over to you! Do some basic summaries of the dataset, including distributions ofany key columns.
summary(customerData)
sum(is.na(customerData))
lifestageCategory <- data.frame(sort(table(customerData$LIFESTAGE),decreasing = TRUE ))
setnames(lifestageCategory,c("lifestage","freq"))
ggplot(lifestageCategory,aes(x=lifestage,y= freq,fill=lifestage)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="frequency",title="Distribution Of Customers Over Lifestages")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
premiumCustomerType <- data.frame(sort(table(customerData$PREMIUM_CUSTOMER),decreasing = TRUE ))
setnames(premiumCustomerType,c("premium_customer_type","freq"))
ggplot(premiumCustomerType,aes(x=premium_customer_type,y= freq,fill=premium_customer_type)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="frequency",title="Distribution Of Customers Over Premium Types")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
#### Merge transaction data to customer data
data <- merge(transactionData, customerData, all.x = TRUE)
# Over to you! See if any transactions did not have a matched customer.
sum(is.na(data))
fwrite(data, paste0(filePath,"QVI_data.csv"))
#### Total sales by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate the summary of sales by those dimensions and create a plot.
#total sales by life stages
totalSalesByLifestage <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$LIFESTAGE),FUN=sum)
setnames(totalSalesByLifestage,c("Lifestage","Total_Sales"))
totalSalesByLifestage<-totalSalesByLifestage[order(totalSalesByLifestage$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByLifestage,aes(x=reorder(Lifestage,-Total_Sales),y= Total_Sales,fill=Lifestage)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "lifestage", y ="Total Sales",title="Total Sales By Lifestage")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
# total sales by customer premium
totalSalesByPremium <- aggregate(data$TOT_SALES, by=list(LIFESTAGE=data$PREMIUM_CUSTOMER),FUN=sum)
setnames(totalSalesByPremium,c("Premium_Customer","Total_Sales"))
totalSalesByPremium<-totalSalesByPremium[order(totalSalesByPremium$Total_Sales,decreasing = FALSE),]
ggplot(totalSalesByPremium,aes(x=reorder(Premium_Customer,-Total_Sales),y= Total_Sales,fill=Premium_Customer)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Premium Customer", y ="Total Sales",title="Total Sales By Premium Customer")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))+scale_fill_brewer(palette="Dark2")
#total sales by customer premium and lifestage
totalSalesByPremiumAndLifestage <- aggregate(.~LIFESTAGE+PREMIUM_CUSTOMER, data = data[,c("LIFESTAGE","PREMIUM_CUSTOMER","TOT_SALES")] , sum)
totalSalesByPremiumAndLifestage$Lifestage_Premium <- paste(totalSalesByPremiumAndLifestage$LIFESTAGE,totalSalesByPremiumAndLifestage$PREMIUM_CUSTOMER)
totalSalesByPremiumAndLifestage <- totalSalesByPremiumAndLifestage[,c("Lifestage_Premium","TOT_SALES")]
ggplot(totalSalesByPremiumAndLifestage,aes(x=reorder(Lifestage_Premium,-TOT_SALES),y= TOT_SALES,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Total Sales",title="Total Sales By Lifestage By Premium")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Number of customers by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate the summary of number of customers by those dimensions and create a plot.
# Calculating the number of customers by Life-stage and Premium
numberOfCustomersByLifestageByPremium <- data.frame(paste(customerData$LIFESTAGE,customerData$PREMIUM_CUSTOMER))
numberOfCustomersByLifestageByPremium <- data.frame(sort(table(numberOfCustomersByLifestageByPremium),decreasing = TRUE ))
setnames(numberOfCustomersByLifestageByPremium,c("Lifestage_Premium","freq"))
ggplot(numberOfCustomersByLifestageByPremium,aes(x=Lifestage_Premium,y = freq,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Number of Customers",title="Number of Customers By Lifestage By Premium")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Average number of units per customer by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate and plot the average number of units per customer by those two dimensions.
averageNumberOfUnits <- data.table(data[,c("LIFESTAGE","PREMIUM_CUSTOMER","PROD_QTY")])
averageNumberOfUnits$Lifestage_Premium <-  data.table(paste(data$LIFESTAGE,data$PREMIUM_CUSTOMER))
setnames(averageNumberOfUnits,c("Lifestage","premium","prod_qty","Lifestage_Premium"))
averageNumberOfUnits<- averageNumberOfUnits[,c("Lifestage_Premium","prod_qty")]
setnames(averageNumberOfUnits,c("Lifestage_Premium","PROD_QTY"))
averageNumberOfUnits <- aggregate(.~Lifestage_Premium, data = averageNumberOfUnits[,c("Lifestage_Premium","PROD_QTY")] , mean)
ggplot(averageNumberOfUnits,aes(x=reorder(Lifestage_Premium,-PROD_QTY),y= PROD_QTY,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Average Units Bought",title="Average Units Per Customer Segment ")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Average price per unit by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate and plot the average price per unit sold (average sale price) by those two customer dimensions.
averagePrice <- data.table(data[,c("LIFESTAGE","PREMIUM_CUSTOMER","PROD_QTY","TOT_SALES")])
averagePrice$Lifestage_Premium <-  data.table(paste(data$LIFESTAGE,data$PREMIUM_CUSTOMER))
setnames(averagePrice,c("Lifestage","premium","prod_qty","TOT_SALES","Lifestage_Premium"))
averagePrice<- averagePrice[,c("Lifestage_Premium","prod_qty","TOT_SALES")]
averagePrice <- aggregate(.~Lifestage_Premium, data = averagePrice , FUN= sum )
averagePrice$averagePricePerUnit <- averagePrice$TOT_SALES / averagePrice$prod_qty
ggplot(averagePrice,aes(x=reorder(Lifestage_Premium,-averagePricePerUnit),y= averagePricePerUnit,fill=Lifestage_Premium)) +
geom_bar(stat="identity",width = 0.5) +
labs(x = "Lifestage and Premium", y ="Average Price Per Unit Bought",title="Average Price Per Unit Per Customer Segment ")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Perform an independent t-test between mainstream vs premium and budget midage and
#### young singles and couples
# Over to you! Perform a t-test to see if the difference is significant.
mainstreamYoungSingleCouples <- data.table(data)
mainstreamYoungSingleCouples$Lifestage_Premium <- data.table(paste(data$LIFESTAGE, data$PREMIUM_CUSTOMER))
mainstreamYoungSingleCouples <- mainstreamYoungSingleCouples[Lifestage_Premium == 'YOUNG SINGLES/COUPLES Mainstream']
mainstreamYoungSingleCouplesBrandFreq <- data.frame(sort(table(mainstreamYoungSingleCouples$BRAND), decreasing = TRUE))
setnames(mainstreamYoungSingleCouplesBrandFreq, c('BRAND', 'freq'))
ggplot(mainstreamYoungSingleCouplesBrandFreq, aes(x = BRAND, y = freq, fill = BRAND)) +
geom_bar(stat = "identity", width = 0.5) +
labs(x = "Brands", y = "Count", title = "Mainstream - Young Single/Couples Brand Purchases") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5))
#### Deep dive into Mainstream, young singles/couples
# Over to you! Work out of there are brands that these two customer segments prefermore than others. You could use a technique called affinity analysis or a-priori analysis (or any other method if you prefer)
is.na(mainstreamYoungSingleCouples)
ggplot(mainstreamYoungSingleCouples,aes(x=PACK_SIZE) )+
geom_histogram(binwidth = 10,color="black",fill="lightblue") +
labs(x = "Pack Sizes", y ="Frequency",title="Histogram of Pack Sizes For Young Single/Couples- Mainstream")+scale_color_brewer(palette="Dark2")+geom_density(alpha=.2, fill="#FF6666")+
scale_x_continuous(breaks = seq(0, 400, 10), limits = c(0,400))
# calculating mean and sd for pack size for this segment
mean(mainstreamYoungSingleCouples$PACK_SIZE)
sd(mainstreamYoungSingleCouples$PACK_SIZE)
#### Preferred pack size compared to the rest of the population
# Over to you! Do the same for pack size.
segment1 <- data[LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream",]
other <- data[!(LIFESTAGE == "YOUNG SINGLES/COUPLES" & PREMIUM_CUSTOMER == "Mainstream"),]
quantity_segment1 <- segment1[, sum(PROD_QTY)]
quantity_other <- other[, sum(PROD_QTY)]
quantity_other_by_size <- other[, .(other = sum(PROD_QTY)/quantity_other), by = PACK_SIZE]
quantity_segment1_by_pack <- segment1[, .(targetSegment = sum(PROD_QTY)/quantity_segment1), by = PACK_SIZE]
quantity_other_by_pack <- other[, .(other = sum(PROD_QTY)/quantity_other), by = PACK_SIZE]
pack_proportions <- merge(quantity_segment1_by_pack, quantity_other_by_pack)[, affinityToPack := targetSegment/other]
pack_proportions[order(-affinityToPack)]
# set options for R markdown knitting
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(linewidth=80)
#### Average price per unit by LIFESTAGE and PREMIUM_CUSTOMER
# Over to you! Calculate and plot the average price per unit sold (average sale price) by those two customer dimensions.
averagePrice <- data.table(data[,c("LIFESTAGE","PREMIUM_CUSTOMER","PROD_QTY","TOT_SALES")])
